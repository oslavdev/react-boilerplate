# Method 1: https://github.com/firecow/gitlab-ci-local
#
# Method 2: https://dingyuliang.me/gitlab-run-test-gitlab-ci-yml-file-locally/
# docker run --rm -it -v /etc/passwd:/etc/passwd:ro -v $PWD/:/git/ -w /git -v /var/run/docker.sock:/var/run/docker.sock -v ~/.docker/config.json:/root/.docker/config.json:ro gitlab/gitlab-runner exec docker --env IMAGES_BASE_PATH=registry.dev.xuver.com:4000/xuver/images/ --docker-privileged 01_Compiling
#

image: ${IMAGES_BASE_PATH}xcompiler:latest
services:
- name: ${IMAGES_BASE_PATH}docker:18-dind
  alias: docker

stages:
- compiling
- unittesting
- deploying
- scan_deploy

#variables:
  ### These vars are available in this recipe and declared in the page Goups / Settings / CI-CD / Variables
  ### XGITLAB_XAPI_XUSER, XGITLAB_XAPI_XTOKEN
  ### SLACK_WEBHOOK=https://hooks.slack.com/services/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
  ### IMAGES_BASE_PATH=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/images/ = registry.dev.xuver.com/xuver/images/
  ### XPROJECT_COMPILER=${CI_REGISTRY_IMAGE}/compiler = registry.dev.xuver.com:4000/xuver/<repo>/compiler
  ### IMAGETAG_PREFIX=${CI_PIPELINE_ID}-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA} = 76-master-01e0665f # the tail will be added after getting the time in the script
  ### BUILD_INFO_FILE=xversion.env # used to store ENV vars and have them available between stages, jobs and projects

before_script:
- cmd="if [[ -n \"${XGITLAB_XAPI_XUSER}\" ]]; then echo -n ${XGITLAB_XAPI_XTOKEN} | docker login ${CI_REGISTRY} -u ${XGITLAB_XAPI_XUSER} --password-stdin; fi" && echo " >>> $cmd" && eval "$cmd"
# Slack notification
- cmd="CI_PROJECT_NAME_UPPERCASE=$(echo ${CI_PROJECT_NAME} | tr [a-z] [A-Z])" && echo " >>> $cmd" && eval "$cmd"
- touch ${BUILD_INFO_FILE}
- BUILD_INFO=$(cat ${BUILD_INFO_FILE} 2> /dev/null | grep -v ^IMAGETAG= || true)
- 'cmd="slack_msg=\"<${CI_PROJECT_URL}|${CI_PROJECT_NAME_UPPERCASE}>: <${CI_JOB_URL}|${CI_JOB_NAME}> started (${BUILD_INFO})\"" && echo " >>> $cmd" && eval "$cmd"'
- cmd="if [[ -n \"${SLACK_WEBHOOK}\" ]]; then docker run --rm busybox wget -q --no-check-certificate --post-data=\"payload={\\\"text\\\":\\\"${slack_msg}\\\"}\" ${SLACK_WEBHOOK}; fi" && echo " >>> $cmd" && eval "$cmd"

# - git clone ${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_PROJECT_NAME}.git

01_Compiling:
  stage: compiling
  retry: 2
  script:
  - |
    cmd="bash ${CI_PROJECT_DIR}/ci-work/00-prepare.sh --ACTION=bp" && echo " >>> $cmd" && eval "$cmd" && \
    cmd="bash ${CI_PROJECT_DIR}/ci-work/01-compile.sh --CLEAN_BUILD_DIR=y" && echo " >>> $cmd" && eval "$cmd" && \
    cmd="bash ${CI_PROJECT_DIR}/ci-work/03-build.sh --ACTION=bp" && echo " >>> $cmd" && eval "$cmd" \
    || exit 1

  - echo "Adding a tag in repo with the current version"
  - cmd="source ${BUILD_INFO_FILE}" && echo " >>> $cmd" && eval "${cmd}" # here we got var IMAGETAG
    # CI_REPOSITORY_URL=https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.dev.xuver.com:4000/xuver/configs.git
    # but we need
    # CI_REPOSITORY_URL=https://gitlab-ci-token:${XGITLAB_XAPI_XTOKEN}@gitlab.dev.xuver.com:4000/xuver/configs.git
  - url_prefix=$(echo ${CI_REPOSITORY_URL} | cut -d":" -f1,2) && echo "url_prefix=${url_prefix}"
  - url_suffix=$(echo ${CI_REPOSITORY_URL} | cut -d"@" -f2) && echo "url_suffix=${url_suffix}"
  - repo_url=${url_prefix}:${XGITLAB_XAPI_XTOKEN}@${url_suffix}

  - cmd="ping -c 1 gitlab.dev.xuver.com"                      && echo " >>> $cmd" && eval "${cmd}"
  - cmd="git config --global user.email xgitlab@xapi.xaccess" && echo " >>> $cmd" && eval "${cmd}"
  - cmd="git config --global user.name xGitLab"               && echo " >>> $cmd" && eval "${cmd}"
  - cmd="git tag ${IMAGETAG}"                                 && echo " >>> $cmd" && eval "${cmd}"
  - cmd="git push --repo=${repo_url} --tags"                  && echo " >>> $cmd" && eval "${cmd}"

  artifacts:
    paths:
    - xversion.html
    - ${BUILD_INFO_FILE}
    - dist/
    - node_modules/
    expire_in: 53 weeks
  except:
    refs:
    - tags
  environment:
    name: COMPILING

02_Testing:
  stage: unittesting
  retry: 2
  script:
   # to skip tests change variable SKIP_TESTS in GitLab repo Settings \ CI/CD \ Variables
   # or commit message must contain " SKIP_TESTS=true;"
  - cmd="bash ci-work/02-tests.sh"
  - mkdir -pv ci-artifacts/
  - touch junit.xml
  - SKIP_TESTS_IN_COMMIT=$(git log -1 --pretty=%B | grep -o "(SKIP_TESTS=true)" || true)
  - if [[ ${SKIP_TESTS:-false} == "true" ]]; then cmd="echo \"Tests are skipped with GitLab var SKIP_TESTS=${SKIP_TESTS}\""; fi
  - if [[ -n ${SKIP_TESTS_IN_COMMIT} ]]; then cmd="echo \"Tests are skipped with Commit message SKIP_TESTS=${SKIP_TESTS_IN_COMMIT}\""; fi
  - echo " - SKIP_TESTS=${SKIP_TESTS:-false}"
  - echo " - SKIP_TESTS=${SKIP_TESTS_IN_COMMIT:-false} (from commit)"
  - echo " >>> $cmd" && eval "$cmd"
  artifacts:
    paths:
    - ci-artifacts/
    - junit.xml
    reports:
      junit: junit.xml
    expire_in: 53 weeks
  dependencies:
  - 01_Compiling
  except:
    refs:
    - tags
  environment:
    name: TESTING

04_DEV_Deploy:
  stage: deploying
  retry: 2
  variables: # These vars you can set when manually running the job
    TARGET: xu@_.dev.xuver.com
    COMPONENTS_TO_UPDATE: "CURRENT_COMPONENT var from ${CI_PROJECT_DIR}/ci-work/projectspecific"
    XUVER_API_IMAGETAG: latest
    XUVER_VIEWER_IMAGETAG: latest
    XUVER_APP_IMAGETAG: latest
    XUVER_SYNC_IMAGETAG: latest
    XUVER_SUMMERWOOD_IMAGETAG: latest
    XUVER_DOWNLOADS_IMAGETAG: latest
    COMPONENTS: pivaswd
  script:
  - cmd="cat ${BUILD_INFO_FILE}" && echo " >>> $cmd" && eval "$cmd"
  - cmd="source ${BUILD_INFO_FILE}" && echo " >>> $cmd" && eval "$cmd"
  - cmd="cat ${CI_PROJECT_DIR}/ci-work/projectspecific" && echo " >>> $cmd" && eval "$cmd"
  - cmd="source ${CI_PROJECT_DIR}/ci-work/projectspecific" && echo " >>> $cmd" && eval "$cmd"
  - cmd="COMPONENTS_TO_UPDATE=${CURRENT_COMPONENT}" && echo " >>> $cmd" && eval "$cmd"

  - cmd="mkdir -pv \${HOME}/.ssh/" && echo " >>> $cmd" && eval "$cmd"
  - cmd="echo \"${DEPLOY_access_ssh_id_rsa_base64}\" | base64 -d >\${HOME}/.ssh/id_rsa" && echo " >>> $cmd" && eval "$cmd"
  - cmd="echo \"${DEPLOY_access_ssh_id_rsa_pub_base64}\" | base64 -d >\${HOME}/.ssh/id_rsa.pub" && echo " >>> $cmd" && eval "$cmd"
  - cmd="chmod 600 \${HOME}/.ssh/id_rsa" && echo " >>> $cmd" && eval "$cmd"
  - cmd="chmod 644 \${HOME}/.ssh/id_rsa.pub" && echo " >>> $cmd" && eval "$cmd"

  - cmd="bash ci-work/04-deploy.sh --TARGET=${TARGET} --ACTION=t --rmi -v" && echo " >>> $cmd" && eval "$cmd"

  - cmd="bash ci-work/04-deploy.sh --TARGET=${TARGET} --ACTION=ius --COMPONENTS_TO_UPDATE=${COMPONENTS_TO_UPDATE} --XUVER_API_IMAGETAG=${XUVER_API_IMAGETAG} --XUVER_VIEWER_IMAGETAG=${XUVER_VIEWER_IMAGETAG} --XUVER_APP_IMAGETAG=${XUVER_APP_IMAGETAG} --XUVER_SYNC_IMAGETAG=${XUVER_SYNC_IMAGETAG} --XUVER_SUMMERWOOD_IMAGETAG=${XUVER_SUMMERWOOD_IMAGETAG} --XUVER_DOWNLOADS_IMAGETAG=${XUVER_DOWNLOADS_IMAGETAG} --COMPONENTS=${COMPONENTS} --SILENT --DBBACKUP" && echo " >>> $cmd" && eval "$cmd"
  except:
    refs:
    - tags
  environment:
    name: DEVELOP
  dependencies:
  - 01_Compiling
  - 02_Testing

04_PROD_Deploy:
  stage: deploying
  retry: 2
  variables: # These vars you can set when manually running the job
    TARGET: ubuntu@prod.xuver.com
    COMPONENTS_TO_UPDATE: "CURRENT_COMPONENT var from ${CI_PROJECT_DIR}/ci-work/projectspecific"
    XUVER_API_IMAGETAG: latest
    XUVER_VIEWER_IMAGETAG: latest
    XUVER_APP_IMAGETAG: latest
    XUVER_SYNC_IMAGETAG: latest
    XUVER_SUMMERWOOD_IMAGETAG: latest
    XUVER_DOWNLOADS_IMAGETAG: latest
    COMPONENTS: pivawd
  script:
  - cmd="cat ${BUILD_INFO_FILE}" && echo " >>> $cmd" && eval "$cmd"
  - cmd="source ${BUILD_INFO_FILE}" && echo " >>> $cmd" && eval "$cmd"
  - cmd="cat ${CI_PROJECT_DIR}/ci-work/projectspecific" && echo " >>> $cmd" && eval "$cmd"
  - cmd="source ${CI_PROJECT_DIR}/ci-work/projectspecific" && echo " >>> $cmd" && eval "$cmd"
  - cmd="COMPONENTS_TO_UPDATE=${CURRENT_COMPONENT}" && echo " >>> $cmd" && eval "$cmd"

  - if [[ ${PROD_DEPLOY_ACCESS_EMAIL} != *"${GITLAB_USER_EMAIL}"* && ${PROD_DEPLOY_ACCESS_LOGIN} != *"${GITLAB_USER_LOGIN}"* ]]; then echo "ACCESS DENIED! You (${GITLAB_USER_EMAIL}, ${GITLAB_USER_LOGIN}) have no access to run this job!"; exit 1; fi
  - echo "You (${GITLAB_USER_EMAIL}, ${GITLAB_USER_LOGIN}) have access to run this job!"
  - |
    echo -e ".\n.\n.  !!! You may cancel this job within 30 secs. If not, the deploy will begin. Starting in 30 seconds...\n."
    echo " - TARGET=${TARGET}"
    echo " - COMPONENTS_TO_UPDATE=${COMPONENTS_TO_UPDATE}"
    if [[ "${COMPONENTS_TO_UPDATE}" == *"i"* ]]; then echo " - XUVER_API_IMAGETAG=${XUVER_API_IMAGETAG}"; fi
    if [[ "${COMPONENTS_TO_UPDATE}" == *"v"* ]]; then echo " - XUVER_VIEWER_IMAGETAG=${XUVER_VIEWER_IMAGETAG}"; fi
    if [[ "${COMPONENTS_TO_UPDATE}" == *"a"* ]]; then echo " - XUVER_APP_IMAGETAG=${XUVER_APP_IMAGETAG}"; fi
    if [[ "${COMPONENTS_TO_UPDATE}" == *"s"* ]]; then echo " - XUVER_SYNC_IMAGETAG=${XUVER_SYNC_IMAGETAG}"; fi
    if [[ "${COMPONENTS_TO_UPDATE}" == *"w"* ]]; then echo " - XUVER_SUMMERWOOD_IMAGETAG=${XUVER_SUMMERWOOD_IMAGETAG}"; fi
    if [[ "${COMPONENTS_TO_UPDATE}" == *"d"* ]]; then echo " - XUVER_DOWNLOADS_IMAGETAG=${XUVER_DOWNLOADS_IMAGETAG}"; fi
    echo " - COMPONENTS=${COMPONENTS}"
    echo -e ".\n."
  - cmd="i=0;while (( i++ < 30 )); do sleep 1; echo .\$i; done" && echo " >>> $cmd" && eval "$cmd"

  - cmd="mkdir -pv \${HOME}/.ssh/" && echo " >>> $cmd" && eval "$cmd"
  - cmd="echo \"${DEPLOY_access_ssh_id_rsa_base64}\" | base64 -d >\${HOME}/.ssh/id_rsa" && echo " >>> $cmd" && eval "$cmd"
  - cmd="echo \"${DEPLOY_access_ssh_id_rsa_pub_base64}\" | base64 -d >\${HOME}/.ssh/id_rsa.pub" && echo " >>> $cmd" && eval "$cmd"
  - cmd="chmod 600 \${HOME}/.ssh/id_rsa" && echo " >>> $cmd" && eval "$cmd"
  - cmd="chmod 644 \${HOME}/.ssh/id_rsa.pub" && echo " >>> $cmd" && eval "$cmd"

  - cmd="bash ci-work/04-deploy.sh --TARGET=${TARGET} --ACTION=ius --COMPONENTS_TO_UPDATE=${COMPONENTS_TO_UPDATE} --XUVER_API_IMAGETAG=${XUVER_API_IMAGETAG} --XUVER_VIEWER_IMAGETAG=${XUVER_VIEWER_IMAGETAG} --XUVER_APP_IMAGETAG=${XUVER_APP_IMAGETAG} --XUVER_SYNC_IMAGETAG=${XUVER_SYNC_IMAGETAG} --XUVER_SUMMERWOOD_IMAGETAG=${XUVER_SUMMERWOOD_IMAGETAG} --XUVER_DOWNLOADS_IMAGETAG=${XUVER_DOWNLOADS_IMAGETAG} --COMPONENTS=${COMPONENTS} --SILENT --DBBACKUP" && echo " >>> $cmd" && eval "$cmd"
  - cmd="bash ci-work/99-mark-as-prod.sh --COMPONENTS_TO_UPDATE=${COMPONENTS_TO_UPDATE} --XUVER_API_IMAGETAG=${XUVER_API_IMAGETAG} --XUVER_VIEWER_IMAGETAG=${XUVER_VIEWER_IMAGETAG} --XUVER_APP_IMAGETAG=${XUVER_APP_IMAGETAG} --XUVER_SYNC_IMAGETAG=${XUVER_SYNC_IMAGETAG} --XUVER_SUMMERWOOD_IMAGETAG=${XUVER_SUMMERWOOD_IMAGETAG} --XUVER_DOWNLOADS_IMAGETAG=${XUVER_DOWNLOADS_IMAGETAG} --SILENT" && echo " >>> $cmd" && eval "$cmd"
  only:
  - master
  except:
    refs:
    - tags
  when: manual
  environment:
    name: PRODUCTION
  dependencies:
  - 01_Compiling
  - 02_Testing

05_Scanning_DEV:
  stage: scan_deploy
  retry: 2
  script:
  - cmd="cat ${CI_PROJECT_DIR}/ci-work/projectspecific" && echo " >>> $cmd" && eval "$cmd"
  - cmd="source ${CI_PROJECT_DIR}/ci-work/projectspecific" && echo " >>> $cmd" && eval "$cmd"
  - |
    if   [[ "${CURRENT_COMPONENT}" == *"i"* ]]; then SCAN_TYPE=full-scan; TARGET_URL=https://api.dev.xuver.com;
    elif [[ "${CURRENT_COMPONENT}" == *"v"* ]]; then SCAN_TYPE=full-scan; TARGET_URL=https://viewer.dev.xuver.com;
    elif [[ "${CURRENT_COMPONENT}" == *"a"* ]]; then SCAN_TYPE=full-scan; TARGET_URL=https://app.dev.xuver.com;
    elif [[ "${CURRENT_COMPONENT}" == *"s"* ]]; then SCAN_TYPE=full-scan; TARGET_URL=https://app.dev.xuver.com;
    elif [[ "${CURRENT_COMPONENT}" == *"w"* ]]; then SCAN_TYPE=baseline;  TARGET_URL=https://summerwood.dev.xuver.com;
    elif [[ "${CURRENT_COMPONENT}" == *"d"* ]]; then SCAN_TYPE=full-scan; TARGET_URL=https://app.dev.xuver.com;
    fi
  - cmd="bash ci-work/05-scan-deploy.sh --TARGET_URL=${TARGET_URL} --SCAN_TYPE=${SCAN_TYPE}" && echo " >>> $cmd" && eval "$cmd"
  artifacts:
    paths:
    - ci-artifacts/
    expire_in: 53 weeks
  dependencies:
  - 01_Compiling
  - 04_DEV_Deploy
  except:
    refs:
    - tags
  environment:
    name: SCAN_DEV_SERVER

